{"version":3,"sources":["Chapter 4/Parsing Arithmetic Expressions/rpn.parser.js"],"names":[],"mappings":";;;;;;;;;;;;qBAAkB,WAAW;;;;IAEvB,SAAS;AACF,WADP,SAAS,GACW;QAAZ,KAAK,yDAAG,EAAE;;0BADlB,SAAS;;AAEX,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,QAAI,CAAC,KAAK,GAAG,uBAAU,KAAK,CAAC,MAAM,CAAC,CAAC;GACtC;;eAJG,SAAS;;WAKR,iBAAG;AACN,UAAI,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;AACtB,WAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACtD,YAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3B,YAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAClB,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SAC/B,MAAM;AACL,cAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACxB,aAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACvB,kBAAQ,EAAE;AACV,iBAAK,GAAG;AACN,oBAAM,GAAG,GAAG,GAAG,IAAI,CAAC;AACpB,oBAAM;AAAA,AACR,iBAAK,GAAG;AACN,oBAAM,GAAG,GAAG,GAAG,IAAI,CAAC;AACpB,oBAAM;AAAA,AACR,iBAAK,GAAG;AACN,oBAAM,GAAG,GAAG,GAAG,IAAI,CAAC;AACpB,oBAAM;AAAA,AACR,iBAAK,GAAG;AACN,oBAAM,GAAG,GAAG,GAAG,IAAI,CAAC;AACpB,oBAAM;AAAA,AACR;AACE,oBAAM,GAAG,CAAC,CAAC;AACX,oBAAM;AAAA,WACP;AACD,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;OACF;AACD,YAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AAC1B,aAAO,MAAM,CAAC;KACf;;;SApCG,SAAS;;;qBAsCA,SAAS","file":"Chapter 4/Parsing Arithmetic Expressions/rpn.parser.js","sourcesContent":["import Stack from '../Stack/';\n\nclass RPNParser {\n  constructor(input = '') {\n    this.input = input;\n    this.stack = new Stack(input.length);\n  }\n  parse() {\n    var result, num, num2;\n    for (var index = 0; index < this.input.length; index++) {\n      var ch = this.input[index];\n      if (ch.match(/\\d/)) {\n        this.stack.push(parseInt(ch));\n      } else {\n        num2 = this.stack.pop();\n        num = this.stack.pop();\n        switch (ch) {\n        case '+':\n          result = num + num2;\n          break;\n        case '-':\n          result = num - num2;\n          break;\n        case '*':\n          result = num * num2;\n          break;\n        case '/':\n          result = num / num2;\n          break;\n        default:\n          result = 0;\n          break;\n        }\n        this.stack.push(result);\n      }\n    }\n    result = this.stack.pop();\n    return result;\n  }\n}\nexport default RPNParser;"],"sourceRoot":"/source/"}