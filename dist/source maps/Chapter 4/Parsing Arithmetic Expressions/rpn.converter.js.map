{"version":3,"sources":["Chapter 4/Parsing Arithmetic Expressions/rpn.converter.js"],"names":[],"mappings":"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","file":"Chapter 4/Parsing Arithmetic Expressions/rpn.converter.js","sourcesContent":["'use strict';\nimport Stack from '../Stack';\n\nclass RPNConverter {\n  constructor(input = '') {\n      this.input = input;\n      this.stack = new Stack(input.length);\n      this.output = '';\n    }\n    /**\n     * Translates infix to postfix\n     */\n  convert() {\n    for (var index = 0; index < this.input.length; index++) {\n      var char = this.input[index];\n      switch (char) {\n      case '+':\n      case '-':\n        this.consume(char, true, 1);\n        break;\n      case '*':\n      case '/':\n        this.consume(char, true, 2);\n        break;\n      case '(':\n      case ')':\n        this.consume(char, false);\n        break;\n\n      default:\n        this.output += char;\n        break;\n      }\n    }\n    while (!this.stack.isEmpty()) {\n      this.output += this.stack.pop();\n    }\n    return this.output;\n  }\n  consume(char, isOperator, precedence) {\n    if (!isOperator && char === '(') {\n      this.stack.push(char);\n      return;\n    }\n    if (isOperator) {\n      while (!this.stack.isEmpty()) {\n        if (this.operator(char, precedence)) break;\n      }\n      this.stack.push(char);\n    } else {\n      while (!this.stack.isEmpty()) {\n        if (this.seperator()) break;\n      }\n    }\n  }\n\n  operator(char, precedence) {\n    var top = this.stack.pop();\n    if (top === '(') {\n      this.stack.push(top);\n      return true;\n    } else {\n      var prec;\n      if (top === '+' || top === '-') prec = 1;\n      else prec = 2;\n      if (prec < precedence) {\n        this.stack.push(top);\n        return true;\n      } else this.output += top;\n    }\n  }\n\n  seperator() {\n    var character = this.stack.pop();\n    if (character === '(') {\n      return true;\n    } else this.output += character;\n  }\n}\nexport default RPNConverter;"],"sourceRoot":"/source/"}