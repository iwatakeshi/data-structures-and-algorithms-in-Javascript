{"version":3,"sources":["Chapter 2/Array/un-ordered/index.js"],"names":[],"mappings":";;;;;;;;;;QAAO,6BAA6B;;;;;;;IAM9B,OAAO;AACA,WADP,OAAO,GACa;QAAZ,KAAK,yDAAG,EAAE;;0BADlB,OAAO;;AAEP,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;GACpB;;;;;;;;eAHC,OAAO;;WASP,cAAC,GAAG,EAAE;AACN,UAAI,CAAC,CAAC;AACN,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,YAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,YAAI,GAAG,KAAK,IAAI,EAAE,MAAM;OACzB;AACD,UAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EACzB,OAAO,KAAK,CAAC,KACV,OAAO,IAAI,CAAC;KAClB;;;;;;;;WAKG,gBAAC,IAAI,EAAE;AACT,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;KACtC;;;;;;;;WAKG,gBAAC,GAAG,EAAE;AACR,UAAI,CAAC,CAAC;;;AAGN,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAEtC,YAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM;;;OAGlC;;AAED,UAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,KAAK,CAAC,KACrC;;AAEH,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAE1C,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;AAED,YAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AACpB,eAAO,IAAI,CAAC;OACb;KACF;;;;;;;WAIE,iBAAG;AACN,aAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KACxC;;;SA1DG,OAAO;;;qBA6DE,OAAO","file":"Chapter 2/Array/un-ordered/index.js","sourcesContent":["import 'source-map-support/register';\n\n/**\n * This class creates a un-ordered array\n * @class\n */\nclass JSArray {\n  constructor(array = []) {\n      this.stack = array;\n    }\n    /**\n     * Finds the item in the array if it exists.\n     * @param {Number|String}\n     * @return {Boolean} The truth value\n     */\n  find(key) {\n      var i;\n      for (i = 0; i < this.stack.length; i++) {\n        var item = this.stack[i];\n        if (key === item) break;\n      }\n      if (i === this.stack.length)\n        return false;\n      else return true;\n    }\n    /**\n     * Inserts the item into the array.\n     * @param {Number|String}\n     */\n  insert(item) {\n      this.stack[this.stack.length] = item;\n    }\n    /**\n     * Removes all specified items from the array.\n     * @param {Number|String}\n     */\n  remove(key) {\n      var i;\n      // Iterate through the array until we find\n      // the item with the key\n      for (i = 0; i < this.stack.length; i++) {\n        // We found it\n        if (key === this.stack[i]) break;\n        // or we just went through all but\n        // didn't find it\n      }\n      // We didn't find it at worst case senario\n      if (i === this.stack.length) return false;\n      else {\n        // Start iterating from the last position\n        for (var j = i; j < this.stack.length; j++) {\n          // Shift down the elements\n          this.stack[j] = this.stack[j + 1];\n        }\n        // Decrement the size\n        this.stack.length--;\n        return true;\n      }\n    }\n    /**\n     * Prints all the elements in the array\n     */\n  print() {\n    console.log.apply(console, this.stack);\n  }\n}\n\nexport default JSArray;"],"sourceRoot":"/source/"}