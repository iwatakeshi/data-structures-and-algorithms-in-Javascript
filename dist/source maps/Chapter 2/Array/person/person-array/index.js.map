{"version":3,"sources":["Chapter 2/Array/person/person-array/index.js"],"names":[],"mappings":";;;;;;;;;;;;QAAO,6BAA6B;;gBACjB,KAAK;;;;;;;;;;IAMlB,OAAO;AACA,WADP,OAAO,GACa;QAAZ,KAAK,yDAAG,EAAE;;0BADlB,OAAO;;AAEP,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;GACpB;;;;;;;eAHC,OAAO;;WAQL,kBAAG;AACL,aAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC1B;;;;;;;;;WAMC,cAAC,GAAG,EAAE;AACN,UAAI,CAAC,CAAC;AACN,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,YAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,YAAI,GAAG,KAAK,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM;OACvC;AACD,UAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EACzB,OAAO,KAAK,CAAC,KACV,OAAO,IAAI,CAAC;KAClB;;;;;;;;WAKG,gBAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE;AAC7B,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,kBAAW,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;KACtE;;;;;;;;WAKG,gBAAC,GAAG,EAAE;AACR,UAAI,CAAC,CAAC;;;AAGN,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAEtC,YAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,MAAM;;;OAGhD;;AAED,UAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,KAAK,CAAC,KACrC;;AAEH,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAE1C,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;AAED,YAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AACpB,eAAO,IAAI,CAAC;OACb;KACF;;;;;;;WAIE,iBAAG;AACN,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,YAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,eAAO,CAAC,KAAK,EAAE,CAAC;OACjB;KACF;;;SApEG,OAAO;;;qBAuEE,OAAO","file":"Chapter 2/Array/person/person-array/index.js","sourcesContent":["import 'source-map-support/register';\nimport Person from '../';\n/**\n * This class creates a un-ordered array\n * for the people class\n * @class JSArray\n */\nclass JSArray {\n  constructor(array = []) {\n      this.stack = array;\n    }\n    /**\n     * Represents the length of the array.\n     * @return {Number} The length of the array\n     */\n  length() {\n      return this.stack.length;\n    }\n    /**\n     * Finds the item in the array if it exists.\n     * @param {Number|String}\n     * @return {Boolean} The truth value\n     */\n  find(key) {\n      var i;\n      for (i = 0; i < this.stack.length; i++) {\n        var item = this.stack[i];\n        if (key === item.getLastName()) break;\n      }\n      if (i === this.stack.length)\n        return false;\n      else return true;\n    }\n    /**\n     * Inserts the person into the array.\n     * @param {String} item The item to insert\n     */\n  insert(firstname, lastname, age) {\n      this.stack[this.stack.length] = new Person(firstname, lastname, age);\n    }\n    /**\n     * Removes all specified items from the array.\n     * @param {Number|String} key The key to find the item\n     */\n  remove(key) {\n      var i;\n      // Iterate through the array until we find\n      // the item with the key\n      for (i = 0; i < this.stack.length; i++) {\n        // We found it\n        if (key === this.stack[i].getLastName()) break;\n        // or we just went through all but\n        // didn't find it\n      }\n      // We didn't find it at worst case senario\n      if (i === this.stack.length) return false;\n      else {\n        // Start iterating from the last position\n        for (var j = i; j < this.stack.length; j++) {\n          // Shift down the elements\n          this.stack[j] = this.stack[j + 1];\n        }\n        // Decrement the size\n        this.stack.length--;\n        return true;\n      }\n    }\n    /**\n     * Prints all the elements in the array\n     */\n  print() {\n    for (var i = 0; i < this.stack.length; i++) {\n      var element = this.stack[i];\n      element.print();\n    }\n  }\n}\n\nexport default JSArray;"],"sourceRoot":"/source/"}