{"version":3,"sources":["Chapter 2/Array/ordered/index.js"],"names":[],"mappings":";;;;;;;;;;QAAO,6BAA6B;;;;;;;IAM9B,OAAO;AACA,WADP,OAAO,GACa;QAAZ,KAAK,yDAAG,EAAE;;0BADlB,OAAO;;AAEP,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;GACpB;;;;;;;eAHC,OAAO;;WAQL,kBAAG;AACL,aAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC1B;;;;;;;;;WAMC,cAAC,GAAG,EAAE;AACN,UAAI,MAAM,YAAA,CAAC;;AAEX,UAAI,UAAU,GAAG,CAAC;;;AAEhB,gBAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACrC,aAAO,IAAI,EAAE;;;AAGX,cAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,UAAU,CAAA,GAAI,CAAC,CAAC,CAAC;;AAEnD,YAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAC5B,OAAO,MAAM,CAAC;;aAEX,IAAI,UAAU,GAAG,UAAU,EAC9B,OAAO,CAAC,CAAC,CAAC;;eAEP;;AAEH,kBAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG;;;AAG1B,0BAAU,GAAG,MAAM,GAAG,CAAC,CAAC;;;mBAGrB,UAAU,GAAG,MAAM,GAAG,CAAC,CAAC;aAC9B;OACF;KACF;;;;;;;;WAKG,gBAAC,IAAI,EAAE;AACT,UAAI,CAAC,CAAC;;;AAGN,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAEtC,YAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,EACtB,MAAM;OACT;;AAED,WAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;;;;;AAK1C,YAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;OACnC;;AAED,UAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KACtB;;;;;;;;WAKG,gBAAC,GAAG,EAAE;AACR,UAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAEvB,UAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,KAAK,CAAC,KACrC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK,CAAC,KAC3B;;AAEH,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAE1C,cAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;AAED,YAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AACpB,eAAO,IAAI,CAAC;OACb;KACF;;;;;;;WAIE,iBAAG;AACN,aAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KACxC;;;SA9FG,OAAO;;;qBAiGE,OAAO","file":"Chapter 2/Array/ordered/index.js","sourcesContent":["import 'source-map-support/register';\n\n/**\n * This class creates an ordered array.\n * @class JSArray\n */\nclass JSArray {\n  constructor(array = []) {\n      this.stack = array;\n    }\n    /**\n     * Represents the length of the array.\n     * @return {Number} The length of the array\n     */\n  length() {\n      return this.stack.length;\n    }\n    /**\n     * Finds the item in the array if it exists.\n     * @param {Number}\n     * @return {Number} The index if it exists or -1\n     */\n  find(key) {\n      let middle;\n      // Lower bound is the first index\n      var lowerBound = 0,\n        // Upper bound is the last index\n        upperBound = this.stack.length - 1;\n      while (true) {\n        // The current index which is half of the\n        // length of the array\n        middle = Math.floor((lowerBound + upperBound) / 2);\n        // Found it!\n        if (key === this.stack[middle])\n          return middle;\n        // We didn't find it and we can't divide anymore\n        else if (lowerBound > upperBound)\n          return -1;\n        // We didn't find it yet but we can keep dividing\n        else {\n          // Check if the item is below the key\n          if (this.stack[middle] < key)\n          // Then it's the upper half\n          // (because the item must be >= key)\n            lowerBound = middle + 1;\n          // Then it's in the lower half\n          // (because the item must be <= key)\n          else upperBound = middle - 1;\n        }\n      }\n    }\n    /**\n     * Inserts the item into the array in an order matter.\n     * @param {Number} item The item to insert\n     */\n  insert(item) {\n      var i;\n      // Iterate through the array and find where\n      // we should put this item\n      for (i = 0; i < this.stack.length; i++) {\n        // Begin linear search\n        if (this.stack[i] > item)\n          break;\n      }\n      // Let's move the bigger items up!\n      for (var j = this.stack.length; j > i; j--) {\n        // Detail:\n        // As we go down from the length of the array (size)\n        // create a new item (stack[j], where it's undefined)\n        // then assign the previous item in the array to it\n        this.stack[j] = this.stack[j - 1];\n      }\n      // Insert the item\n      this.stack[i] = item;\n    }\n    /**\n     * Removes all specified items from the array.\n     * @param {Number} key The key to find the item\n     */\n  remove(key) {\n      var i = this.find(key);\n      // We didn't find it at worst case senario\n      if (i === this.stack.length) return false;\n      else if (i === -1) return false;\n      else {\n        // Start iterating from the last position\n        for (var j = i; j < this.stack.length; j++) {\n          // Shift down the elements\n          this.stack[j] = this.stack[j + 1];\n        }\n        // Decrement the size\n        this.stack.length--;\n        return true;\n      }\n    }\n    /**\n     * Prints all the elements in the array\n     */\n  print() {\n    console.log.apply(console, this.stack);\n  }\n}\n\nexport default JSArray;"],"sourceRoot":"/source/"}